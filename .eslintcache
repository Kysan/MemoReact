[{"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\index.js":"1","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\reportWebVitals.js":"2","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Board.jsx":"3","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Score.jsx":"4","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Square.jsx":"5","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\App.js":"6","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\header.jsx":"7","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Header.jsx":"8"},{"size":500,"mtime":1608676288198,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1207,"mtime":1608679763111,"results":"12","hashOfConfig":"10"},{"size":162,"mtime":1608679600879,"results":"13","hashOfConfig":"10"},{"size":874,"mtime":1608679710798,"results":"14","hashOfConfig":"10"},{"size":3320,"mtime":1608683106402,"results":"15","hashOfConfig":"10"},{"size":138,"mtime":1608682817647,"results":"16","hashOfConfig":"17"},{"size":138,"mtime":1608682817647,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"icc3h8",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12mnf03",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\index.js",[],["38","39"],"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\reportWebVitals.js",[],"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Board.jsx",[],"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Score.jsx",[],"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Square.jsx",["40","41","42","43"],"import React, { Component } from \"react\";\r\n// * SFC meilleur ?\r\n\r\n// * transform: rotateY(180deg); pour faire un effet stylé sur la carte\r\nclass Square extends Component {\r\n  handleClick = () => {\r\n    let { value, clicked, cleared, id } = this.props;\r\n\r\n    // * ne peux pas être recliqué\r\n    // * ne peux pas être cliqué si il est déjà clear\r\n    if (!this.props.clicked && !this.props.cleared) {\r\n      // * this.props <=> { <value>, <clicked>, <cleared>, <id> }\r\n      this.props.handleClick(this.props);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { value, clicked, cleared, id } = this.props;\r\n    let style = clicked ? { transform: \"transform .25s ease-in-out\" } : {};\r\n    return (\r\n      <div className=\"square\" onClick={this.handleClick} id={id} style={style}>\r\n        {clicked || cleared ? value : \"x\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\App.js",["44"],"import React, { Component } from \"react\";\nimport Board from \"./components/Board\";\nimport Header from \"./components/Header\";\nimport Score from \"./components/Score\";\n\nclass App extends Component {\n  state = {\n    squares: [],\n    score: 0,\n    lastSquareClicked: null,\n    inputBlocked: false,\n  };\n\n  componentDidMount = () => {\n    // * on génère les cases de notre jeu\n    let squares = [];\n\n    for (let k = 0; k <= 32; ++k) {\n      let square = {\n        value: k,\n        clicked: false,\n        cleared: false,\n      };\n      // * 2 fois la même valeur\n      squares.push(square, { ...square });\n    }\n    //\n    // * on les mélanges au hasard et on leurs attribut un id\n    squares = squares\n      .sort(() => Math.random() - 0.5)\n      .map((square, index) => {\n        console.log(index);\n        square.id = index;\n        return square;\n      });\n\n    this.setState({ squares });\n  };\n\n  hasUserWon = () => {\n    const { squares } = this.state;\n    for (let square of squares) if (!square.cleared) return false;\n    return true;\n  };\n\n  handleSquareReveal = (mySquare) => {\n    let squares = [...this.state.squares];\n    squares[mySquare.id].clicked = true;\n    console.log(squares[mySquare.id]);\n\n    this.setState({ squares });\n  };\n\n  handleTwoSquareComparaisonAndLogic = (squareClicked) => {\n    let { lastSquareClicked, inputBlocked, score } = this.state;\n    let squares = [...this.state.squares];\n\n    // * si les 2 cartes sont identiques\n    if (lastSquareClicked.value === squareClicked.value) {\n      squares[lastSquareClicked.id].cleared = true;\n      squares[squareClicked.id].cleared = true;\n\n      this.setState({ squares, score: this.state.score + 1 });\n    } else {\n      // * les deux sont différente il faut les retourner\n      squares[lastSquareClicked.id].clicked = false;\n      squares[squareClicked.id].clicked = false;\n      this.setState({ squares, lastSquareClicked: null });\n    }\n\n    // * on check si il a gagné\n    if (this.hasUserWon()) {\n      alert(`GG ! You won with ${score} points ! (press F5 to restart)`);\n      return;\n    }\n\n    this.setState({ inputBlocked: false });\n  };\n\n  // * méthode appelé quand on clique sur une case\n  handleSquareClicked = (squareClicked) => {\n    let { lastSquareClicked, inputBlocked } = this.state;\n\n    if (inputBlocked) return;\n\n    // * dans tout les cas on révelle la case\n    this.handleSquareReveal(squareClicked);\n\n    if (!lastSquareClicked) {\n      // * premier clique rien à vérifier on mémorise juste la case\n      this.setState({ lastSquareClicked: squareClicked });\n      return;\n    } else {\n      // * deuxième clique on attends un peu le temps que l'utilisateur puisse lire la case\n      setTimeout(\n        () => this.handleTwoSquareComparaisonAndLogic(squareClicked),\n        1000\n      );\n\n      // * doit bloquer les input pour éviter les bugs\n      this.setState({ inputBlocked: true });\n    }\n  };\n\n  render() {\n    // * calcul\n    let { score, squares } = this.state;\n\n    // * retour du rendu\n    return (\n      <React.Fragment>\n        <Header />\n        <div className=\"Game\">\n          <Score score={score} />\n          <Board\n            squares={squares}\n            handleSquareClick={this.handleSquareClicked}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\header.jsx",[],"C:\\Users\\Kysan\\Desktop\\memoreact\\src\\components\\Header.jsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":7,"column":11,"nodeType":"51","messageId":"52","endLine":7,"endColumn":16},{"ruleId":"49","severity":1,"message":"53","line":7,"column":18,"nodeType":"51","messageId":"52","endLine":7,"endColumn":25},{"ruleId":"49","severity":1,"message":"54","line":7,"column":27,"nodeType":"51","messageId":"52","endLine":7,"endColumn":34},{"ruleId":"49","severity":1,"message":"55","line":7,"column":36,"nodeType":"51","messageId":"52","endLine":7,"endColumn":38},{"ruleId":"49","severity":1,"message":"56","line":55,"column":30,"nodeType":"51","messageId":"52","endLine":55,"endColumn":42},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","'clicked' is assigned a value but never used.","'cleared' is assigned a value but never used.","'id' is assigned a value but never used.","'inputBlocked' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]