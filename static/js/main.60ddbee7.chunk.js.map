{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Header.jsx","components/Score.jsx","App.js","index.js"],"names":["Square","handleClick","props","clicked","cleared","this","value","id","className","onClick","Component","Board","renderSquare","square","handleSquareClick","renderRow","rowNumber","squares","slice","map","console","log","Header","Score","points","score","App","state","lastSquareClicked","inputBlocked","componentDidMount","k","push","sort","Math","random","index","setState","hasUserWon","handleSquareReveal","mySquare","handleTwoSquareComparaisonAndLogic","squareClicked","alert","handleSquareClicked","setTimeout","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60ddbee7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// * SFC meilleur ?\r\n\r\n// * transform: rotateY(180deg); pour faire un effet stylé sur la carte\r\nclass Square extends Component {\r\n  handleClick = () => {\r\n    // let { value, clicked, cleared, id } = this.props;\r\n\r\n    // * ne peut pas être recliqué\r\n    // * ne peut pas être cliqué si il est déjà clear\r\n    if (!this.props.clicked && !this.props.cleared) {\r\n      // * this.props <=> { <value>, <clicked>, <cleared>, <id> }\r\n      this.props.handleClick(this.props);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { value, clicked, cleared, id } = this.props;\r\n    // * à rajouter pour faire une animation\r\n    // * let style = clicked ? { transform: \"transform .25s ease-in-out\" } : {};\r\n    // * style={style}>\r\n    return (\r\n      <div className=\"square\" onClick={this.handleClick} id={id}>\r\n        {clicked || cleared ? value : \"x\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square\";\r\n// :\r\n// * on va faire 4 ligne de 8 collones = 32\r\nclass Board extends Component {\r\n  renderSquare = (square) => {\r\n    let { handleSquareClick } = this.props;\r\n    let { value, clicked, cleared, id } = square; // * composition d'un objet square\r\n    return (\r\n      <Square\r\n        key={id}\r\n        value={value}\r\n        clicked={clicked}\r\n        cleared={cleared}\r\n        id={id}\r\n        handleClick={handleSquareClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  renderRow = (rowNumber) => {\r\n    let { squares } = this.props;\r\n    const row = squares\r\n      .slice(rowNumber * 8, (rowNumber + 1) * 8 - 1) // * on récupère ceux de la row\r\n      .map((square) => this.renderSquare(square)); // * et on calcul le rendu pour chaque element\r\n    return row;\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props.squares);\r\n    return (\r\n      <div className=\"board\">\r\n        {\r\n          /* (je n'aime pas ce que fait le formatage par defaut) */\r\n\r\n          [0, 1, 2, 3].map((rowNumber) => (\r\n            <div className=\"row\"> {this.renderRow(rowNumber)}</div>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <div className=\"my-header\">MemoReact</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Score = ({ score: points }) => {\r\n  return <div className=\"score\">Votre score : {points}</div>;\r\n};\r\n\r\nexport default Score;\r\n","import React, { Component } from \"react\";\nimport Board from \"./components/Board\";\nimport Header from \"./components/Header\";\nimport Score from \"./components/Score\";\n\nclass App extends Component {\n  state = {\n    squares: [],\n    score: 0,\n    lastSquareClicked: null,\n    inputBlocked: false,\n  };\n\n  componentDidMount = () => {\n    // * on génère les cases de notre jeu\n    let squares = [];\n\n    for (let k = 0; k <= 32; ++k) {\n      let square = {\n        value: k,\n        clicked: false,\n        cleared: false,\n      };\n      // * 2 fois la même valeur\n      squares.push(square, { ...square });\n    }\n    //\n    // * on les mélanges au hasard et on leurs attribut un id\n    squares = squares\n      .sort(() => Math.random() - 0.5)\n      .map((square, index) => {\n        console.log(index);\n        square.id = index;\n        return square;\n      });\n\n    this.setState({ squares });\n  };\n\n  hasUserWon = () => {\n    const { squares } = this.state;\n    for (let square of squares) if (!square.cleared) return false;\n    return true;\n  };\n\n  handleSquareReveal = (mySquare) => {\n    let squares = [...this.state.squares];\n    squares[mySquare.id].clicked = true;\n    console.log(squares[mySquare.id]);\n\n    this.setState({ squares });\n  };\n\n  handleTwoSquareComparaisonAndLogic = (squareClicked) => {\n    let { lastSquareClicked, score } = this.state;\n    let squares = [...this.state.squares];\n\n    // * si les 2 cartes sont identiques\n    if (lastSquareClicked.value === squareClicked.value) {\n      squares[lastSquareClicked.id].cleared = true;\n      squares[squareClicked.id].cleared = true;\n\n      this.setState({ squares, score: this.state.score + 1 });\n    } else {\n      // * les deux sont différente il faut les retourner\n      squares[lastSquareClicked.id].clicked = false;\n      squares[squareClicked.id].clicked = false;\n      this.setState({ squares, lastSquareClicked: null });\n    }\n\n    // * on check si il a gagné\n    if (this.hasUserWon()) {\n      alert(`GG ! You won with ${score} points ! (press F5 to restart)`);\n      return;\n    }\n\n    this.setState({ inputBlocked: false });\n  };\n\n  // * méthode appelé quand on clique sur une case\n  handleSquareClicked = (squareClicked) => {\n    let { lastSquareClicked, inputBlocked } = this.state;\n\n    if (inputBlocked) return;\n\n    // * dans tout les cas on révelle la case\n    this.handleSquareReveal(squareClicked);\n\n    if (!lastSquareClicked) {\n      // * premier clique rien à vérifier on mémorise juste la case\n      this.setState({ lastSquareClicked: squareClicked });\n      return;\n    } else {\n      // * deuxième clique on attends un peu le temps que l'utilisateur puisse lire la case\n      setTimeout(\n        () => this.handleTwoSquareComparaisonAndLogic(squareClicked),\n        1000\n      );\n\n      // * doit bloquer les input pour éviter les bugs\n      this.setState({ inputBlocked: true });\n    }\n  };\n\n  render() {\n    // * calcul\n    let { score, squares } = this.state;\n\n    // * retour du rendu\n    return (\n      <React.Fragment>\n        <Header />\n        <div className=\"Game\">\n          <Score score={score} />\n          <Board\n            squares={squares}\n            handleSquareClick={this.handleSquareClicked}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}